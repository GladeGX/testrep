import pygame as pg
import time

pg.init()

class SimppleMan():
    def __init__(self):
        self.spisok_kadrov = [pg.image.load('idle1.png'),
                              pg.image.load('idle2.png'),
                              pg.image.load('idle3.png'),
                              pg.image.load('idle4.png'),
                              pg.image.load('idle5.png'),
                              pg.image.load('idle6.png'),
                              pg.image.load('idle7.png'),
                              pg.image.load('idle8.png')]

        self.spisok_kadrov_left = [pg.transform.flip(pg.image.load('idle1.png'), True, False),
                                   pg.transform.flip(pg.image.load('idle2.png'), True, False),
                                   pg.transform.flip(pg.image.load('idle3.png'), True, False),
                                   pg.transform.flip(pg.image.load('idle4.png'), True, False),
                                   pg.transform.flip(pg.image.load('idle5.png'), True, False),
                                   pg.transform.flip(pg.image.load('idle6.png'), True, False),
                                   pg.transform.flip(pg.image.load('idle7.png'), True, False),
                                   pg.transform.flip(pg.image.load('idle8.png'), True, False)]

        self.spisok_animok = [pg.image.load('Run1.png'),
                              pg.image.load('Run2.png'),
                              pg.image.load('Run3.png'),
                              pg.image.load('Run4.png'),
                              pg.image.load('Run5.png'),
                              pg.image.load('Run6.png'),
                              pg.image.load('Run7.png'),
                              pg.image.load('Run8.png')]

        self.spisok_animok_left = [pg.transform.flip(pg.image.load('Run1.png'), True, False),
                                   pg.transform.flip(pg.image.load('Run2.png'), True, False),
                                   pg.transform.flip(pg.image.load('Run3.png'), True, False),
                                   pg.transform.flip(pg.image.load('Run4.png'), True, False),
                                   pg.transform.flip(pg.image.load('Run5.png'), True, False),
                                   pg.transform.flip(pg.image.load('Run6.png'), True, False),
                                   pg.transform.flip(pg.image.load('Run7.png'), True, False),
                                   pg.transform.flip(pg.image.load('Run8.png'), True, False)]

        self.spisok_jump = [pg.image.load('Jump1.png'),
                            pg.image.load('Jump2.png')]
        self.spisok_jump_left = [pg.transform.flip(pg.image.load('Jump1.png'), True, False),
                                 pg.transform.flip(pg.image.load('Jump2.png'), True, False)]

        self.x = 120
        self.y = 500
        self.cadr = 0
        self.xsp = 0
        self.stand = True
        self.jump = False
        self.ysp = 10

    def control(self, event):
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_RIGHT:
                self.xsp = 10
                self.stand = True
        if event.type == pg.KEYUP:
            if event.key == pg.K_RIGHT:
                self.xsp = 0
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_LEFT:
                self.xsp = -10
                self.stand = False
        if event.type == pg.KEYUP:
            if event.key == pg.K_LEFT:
                self.xsp = 0
        if event.type == pg.KEYDOWN and self.jump == False:
            if event.key == pg.K_SPACE:
                self.jump = True
                self.ysp = -10


    def update(self, scr):
        if self.jump == True and self.stand == True:
            scr.blit(self.spisok_jump[self.cadr%2], (self.x+50 - self.spisok_jump[self.cadr%2].get_size()[0], self.y - self.spisok_jump[self.cadr%2].get_size()[1]))
            self.checkDown = ((self.x, self.y), (self.x + 66, self.y))
        elif self.jump == True and self.stand == False:
            scr.blit(self.spisok_jump_left[self.cadr%2], (self.x , self.y - self.spisok_jump_left[self.cadr%2].get_size()[1]))
            self.checkDown = ((self.x, self.y), (self.x + 66, self.y))
        elif self.xsp == 0 and self.stand == True:
            scr.blit(self.spisok_kadrov[self.cadr], (self.x, self.y - self.spisok_kadrov[self.cadr].get_size()[1]))
            self.checkDown = ((self.x, self.y), (self.x + 66, self.y))
        elif self.xsp == 0 and self.stand == False:
            scr.blit(self.spisok_kadrov_left[self.cadr],(self.x - self.spisok_kadrov_left[self.cadr].get_size()[0] + 50 , (self.y - self.spisok_kadrov[self.cadr].get_size()[1])))
            self.checkDown = ((self.x, self.y), (self.x + 66, self.y))
        elif self.xsp > 0:
            scr.blit(self.spisok_animok[self.cadr], (self.x, (self.y - self.spisok_kadrov[self.cadr].get_size()[1]) + 36))
            self.checkDown = ((self.x, self.y), (self.x + 66, self.y))
        elif self.xsp < 0:
            scr.blit(self.spisok_animok_left[self.cadr], (self.x, (self.y - self.spisok_kadrov[self.cadr].get_size()[1]) + 36))
            self.checkDown = ((self.x, self.y), (self.x + 66, self.y))

        self.cadr += 1
        if self.cadr > 7:
            self.cadr = 0
        if self.y < 500:
            self.ysp +=1
        if self.y > 500:
            self.jump = False
            self.ysp = 0
            self.y = 500
        self.x += self.xsp
        self.y += self.ysp
        if self.x > 750:
            num = self.x - 750
            self.x -= num
        if self.x < 20:
            num = 20 - self.x
            self.x += num
        if self.ysp != 10:
            self.jump = True
        if self.y >= 500:
            self.jump = False

        return scr

class Platforms():
    def __init__(self,x,y,lenght,weight):
        self.x = x
        self.y = y
        self.lenght = lenght
        self.weight = weight
    def update(self, scr):
        pg.draw.rect(scr,(255,0,0),(self.x,self.y,self.lenght,self.weight))
        return scr
    def checkPos(self,x,y):
        if x >= self.x -36 and x <= self.x + self.lenght and y >= self.y and y <= self.y + self.weight:
            return self.y
        else:
            return False



mag = SimppleMan()
platforma = Platforms(500,450,100,50)
platforma2 = Platforms(300, 370,100,50)
platforma3 = Platforms(100, 290,100,50)

scr = pg.display.set_mode((800, 600))
while True:
    scr.fill((0, 0, 0))
    scr = mag.update(scr)
    scr = platforma.update(scr)
    scr = platforma2.update(scr)
    scr = platforma3.update(scr)
    time.sleep(0.07)
    pg.draw.rect(scr,(255,255,255),(0,500,800,300))
    newY = platforma.checkPos(mag.x,mag.y)
    newY2 = platforma2.checkPos(mag.x,mag.y)
    newY3 = platforma3.checkPos(mag.x, mag.y)
    def noviyIgrek(newIgrek):
        if newIgrek:
            mag.y = newIgrek
            mag.jump = False
            mag.ysp = 0

    noviyIgrek(newY)
    noviyIgrek(newY2)
    noviyIgrek(newY3)
    for i in pg.event.get():
        if i.type == pg.QUIT:
            exit()
        else:
            mag.control(i)
    pg.display.flip()
